import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";
export interface TestTablelandDeploymentsInterface extends utils.Interface {
    functions: {
        "create(string)": FunctionFragment;
        "getBaseURI()": FunctionFragment;
        "getTableId()": FunctionFragment;
        "getTableName()": FunctionFragment;
        "mutate(uint256,string)": FunctionFragment;
        "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
        "safeTransferFrom(address,uint256)": FunctionFragment;
        "setController(uint256,address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "create" | "getBaseURI" | "getTableId" | "getTableName" | "mutate" | "onERC721Received" | "safeTransferFrom" | "setController"): FunctionFragment;
    encodeFunctionData(functionFragment: "create", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getBaseURI", values?: undefined): string;
    encodeFunctionData(functionFragment: "getTableId", values?: undefined): string;
    encodeFunctionData(functionFragment: "getTableName", values?: undefined): string;
    encodeFunctionData(functionFragment: "mutate", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "onERC721Received", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "safeTransferFrom", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setController", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBaseURI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTableId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTableName", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mutate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC721Received", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeTransferFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setController", data: BytesLike): Result;
    events: {};
}
export interface TestTablelandDeployments extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TestTablelandDeploymentsInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        create(statement: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getBaseURI(overrides?: CallOverrides): Promise<[string]>;
        getTableId(overrides?: CallOverrides): Promise<[BigNumber]>;
        getTableName(overrides?: CallOverrides): Promise<[string]>;
        mutate(id: PromiseOrValue<BigNumberish>, statement: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        onERC721Received(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, arg2: PromiseOrValue<BigNumberish>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        safeTransferFrom(to: PromiseOrValue<string>, id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setController(id: PromiseOrValue<BigNumberish>, controller: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    create(statement: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getBaseURI(overrides?: CallOverrides): Promise<string>;
    getTableId(overrides?: CallOverrides): Promise<BigNumber>;
    getTableName(overrides?: CallOverrides): Promise<string>;
    mutate(id: PromiseOrValue<BigNumberish>, statement: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    onERC721Received(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, arg2: PromiseOrValue<BigNumberish>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    safeTransferFrom(to: PromiseOrValue<string>, id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setController(id: PromiseOrValue<BigNumberish>, controller: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        create(statement: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        getBaseURI(overrides?: CallOverrides): Promise<string>;
        getTableId(overrides?: CallOverrides): Promise<BigNumber>;
        getTableName(overrides?: CallOverrides): Promise<string>;
        mutate(id: PromiseOrValue<BigNumberish>, statement: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        onERC721Received(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, arg2: PromiseOrValue<BigNumberish>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        safeTransferFrom(to: PromiseOrValue<string>, id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setController(id: PromiseOrValue<BigNumberish>, controller: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        create(statement: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getBaseURI(overrides?: CallOverrides): Promise<BigNumber>;
        getTableId(overrides?: CallOverrides): Promise<BigNumber>;
        getTableName(overrides?: CallOverrides): Promise<BigNumber>;
        mutate(id: PromiseOrValue<BigNumberish>, statement: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        onERC721Received(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, arg2: PromiseOrValue<BigNumberish>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        safeTransferFrom(to: PromiseOrValue<string>, id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setController(id: PromiseOrValue<BigNumberish>, controller: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        create(statement: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getBaseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTableId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTableName(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        mutate(id: PromiseOrValue<BigNumberish>, statement: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        onERC721Received(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, arg2: PromiseOrValue<BigNumberish>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        safeTransferFrom(to: PromiseOrValue<string>, id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setController(id: PromiseOrValue<BigNumberish>, controller: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=TestTablelandDeployments.d.ts.map