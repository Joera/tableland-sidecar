/// <reference types="node" />
/// <reference types="node" />
import { EventEmitter } from "node:events";
import { type ChildProcess, type SpawnSyncReturns } from "node:child_process";
import { Wallet } from "ethers";
import { Database, Registry, Validator } from "@tableland/sdk";
import { type LocalTableland } from "./main.js";
export interface ConfigDescriptor {
    name: string;
    env: "VALIDATOR_DIR" | "REGISTRY_DIR" | "VERBOSE" | "SILENT" | "DOCKER" | "REGISTRY_PORT";
    file: "validatorDir" | "registryDir" | "verbose" | "silent" | "docker" | "registryPort";
    arg: "validator" | "registry" | "verbose" | "silent" | "docker" | "registryPort";
    isPath: boolean;
}
/**
 * Configuration object for a Local Tableland instance.
 */
export interface Config {
    /**
     * Instance of a Tableland Validator. If docker flag is set, this must be the
     * full repository.
     */
    validator?: string;
    /**
     * Path to the Tableland Validator directory.
     */
    validatorDir?: string;
    /**
     * Instance of a Tableland Registry.
     */
    registry?: string;
    /**
     * Path to the Tableland Registry contract repository.
     */
    registryDir?: string;
    /**
     * Use Docker to run the Validator.
     */
    docker?: boolean;
    /**
     * Output verbose logs to stdout.
     */
    verbose?: boolean;
    /**
     * Silence all output to stdout.
     */
    silent?: boolean;
    /**
     * Use a custom Registry hardhat port, e.g., `http://127.0.0.1:<registryPort>`.
     * Note that clients will need to be configured to use this port over the
     * default port, e.g., connect to `http://127.0.0.1:<registryPort>`
     * instead of `http://127.0.0.1:8545`.
     */
    registryPort?: number;
}
export declare const buildConfig: (config: Config) => Config;
export declare const getConfigFile: () => Promise<Record<string, unknown>>;
export declare const isWindows: () => boolean;
export declare const inDebugMode: () => boolean;
/**
 * Check if a port is in the valid range (1-65535).
 * @param port The port number.
 * @returns Whether or not the port is valid.
 */
export declare const isValidPort: (port: number) => boolean;
export declare const logSync: (prcss: SpawnSyncReturns<Buffer>, shouldThrow?: boolean) => void;
export interface PipeOptions {
    message?: string;
    fails?: {
        message: string;
        hint: string;
    };
    verbose?: boolean;
    silent?: boolean;
    emitter?: EventEmitter;
    readyEvent?: string;
}
export declare const pipeNamedSubprocess: (prefix: string, prcss: ChildProcess, options?: PipeOptions) => void;
export declare const waitForReady: (readyEvent: string, emitter: EventEmitter) => Promise<void>;
export declare const defaultRegistryDir: () => string;
/**
 * Set up a socket connection to check if a port is in use.
 * @param port The port number.
 * @returns true if the port is in use, false otherwise.
 */
export declare function checkPortInUse(port: number): Promise<boolean>;
/**
 * Get an instance of a Tableland `Database` for a signer.
 * @param account The account to use for signing transactions.
 * @returns An instance of a Tableland `Database` with the account as the
 * signer, base URL, and auto-await enabled.
 */
export declare const getDatabase: (account: Wallet) => Database;
/**
 * Get an instance of a Tableland `Registry` for a signer.
 * @param account The account to use for signing transactions.
 * @returns An instance of a Tableland `Registry` with the account as the
 * signer.
 */
export declare const getRegistry: (account: Wallet) => Registry;
/**
 * Get an instance of a Tableland `Validator`.
 * @param baseUrl The validator's base URL to perform queries at.
 * @returns An instance of a Tableland `Validator` with the correct `baseUrl`
 */
export declare const getValidator: (baseUrl?: string) => Validator;
/**
 * Get all of the connected accounts available for signing transactions.
 * Defaults to RPC URL `http://127.0.0.1:8545` if no instance is provided.
 * @param instance An instance of Local Tableland.
 * @returns An instance of a Tableland `Validator` with the correct `baseUrl`.
 */
export declare const getAccounts: (instance?: LocalTableland) => Wallet[];
/**
 * Retrieve the port being used by the Registry on a local hardhat network.
 * Defaults to port 8545 if no instance is provided.
 * @param instance An instance of Local Tableland.
 * @returns The port number being used by the Registry.
 */
export declare const getRegistryPort: (instance?: LocalTableland) => number;
//# sourceMappingURL=util.d.ts.map