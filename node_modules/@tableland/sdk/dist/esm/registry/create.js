import { normalize } from "../helpers/index.js";
import { isPolygon } from "../helpers/ethers.js";
import { validateTableName } from "../helpers/parser.js";
import { getContractAndOverrides } from "./contract.js";
// Match _anything_ between create table and schema portion of create statement (statement must be a single line)
const firstSearch = /(?<create>^CREATE\s+TABLE\s+)(?<name>\S+)(?<schema>\s*\(.*\)[;]?$)/i;
const escapeChars = /"|'|`|\]|\[/;
export async function prepareCreateOne({ statement, chainId, first, }) {
    if (first == null) {
        const normalized = await normalize(statement);
        first = normalized.tables[0];
    }
    const { prefix, name: tableName } = await validateTableName(`${first}_${chainId}`, true);
    const stmt = statement
        .replace(/\n/g, "")
        .replace(/\r/g, "")
        .replace(firstSearch, function (_, create, name, schema) {
        // If this name has any escape chars, escape the whole thing.
        const newName = escapeChars.test(name) ? `[${tableName}]` : tableName;
        return `${create.trim()} ${newName.trim()} ${schema.trim()}`;
    });
    return { statement: stmt, chainId, prefix };
}
export async function create(config, params) {
    if (isCreateOne(params)) {
        return await _createOne(config, params);
    }
    return await _createMany(config, params);
}
async function _createOne({ signer }, { statement, chainId }) {
    const owner = await signer.getAddress();
    const { contract, overrides } = await getContractAndOverrides(signer, chainId);
    if (isPolygon(chainId)) {
        const gasLimit = await contract.estimateGas["create(address,string)"](owner, statement, overrides);
        overrides.gasLimit = Math.floor(gasLimit.toNumber() * 1.2);
    }
    return await contract["create(address,string)"](owner, statement, overrides);
}
async function _createMany({ signer }, { statements, chainId }) {
    const owner = await signer.getAddress();
    const { contract, overrides } = await getContractAndOverrides(signer, chainId);
    if (isPolygon(chainId)) {
        const gasLimit = await contract.estimateGas["create(address,string[])"](owner, statements, overrides);
        overrides.gasLimit = Math.floor(gasLimit.toNumber() * 1.2);
    }
    return await contract["create(address,string[])"](owner, statements, overrides);
}
const isCreateOne = function (params) {
    return params.statement !== undefined;
};
//# sourceMappingURL=create.js.map