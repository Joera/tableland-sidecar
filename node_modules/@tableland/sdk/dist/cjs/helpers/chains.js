"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.overrideDefaults = exports.getChainPollingController = exports.getBaseUrl = exports.getChainId = exports.getContractAddress = exports.isTestnet = exports.getChainInfo = exports.supportedChains = void 0;
const network_js_1 = require("@tableland/evm/network.js");
const await_js_1 = require("./await.js");
// We simply pull this automatically from @tableland/evm to avoid keeping track separately here.
const entries = Object.entries(network_js_1.proxies);
const mapped = entries.map(([chainName, contractAddress]) => {
    // @ts-expect-error this imported object's values are always a string
    const uri = new URL(network_js_1.baseURIs[chainName]);
    const baseUrl = `${uri.protocol}//${uri.host}/api/v1`;
    const chainId = parseInt(uri.pathname
        .split("/")
        .filter((v) => v !== "")
        .pop() /* c8 ignore next */ ?? "");
    // Use per-chain validator polling timeout period
    const pollingTimeout = network_js_1.validatorPollingTimeouts[chainName];
    // Default to 1500ms polling interval, except for Filecoin due to long block times
    const pollingInterval = chainName.includes("filecoin") ? 5000 : 1500;
    const entry = [
        chainName,
        {
            chainName,
            chainId,
            contractAddress,
            baseUrl,
            pollingTimeout,
            pollingInterval,
        },
    ];
    return entry;
});
// Filter out "optimism-goerli-staging"
const filtered = mapped.filter(([chainName]) => chainName !== "optimism-goerli-staging");
/**
 * The set of chains and their information as supported by the Tableland network.
 */
exports.supportedChains = Object.fromEntries(filtered);
// Not exported
const supportedChainsById = Object.fromEntries(Object.values(exports.supportedChains).map((v) => [v.chainId, v]));
/**
 * Get the default chain information for a given chain name.
 * @param chainNameOrId The requested chain name or ID.
 * @returns An object containing the default chainId, contractAddress, chainName, and baseUrl for the given chain.
 */
function getChainInfo(chainNameOrId) {
    const chainInfo = typeof chainNameOrId === "number"
        ? supportedChainsById[chainNameOrId]
        : exports.supportedChains[chainNameOrId];
    /* c8 ignore next 3 */
    if (chainInfo == null) {
        throw new Error(`cannot use unsupported chain: ${chainNameOrId}`);
    }
    return chainInfo;
}
exports.getChainInfo = getChainInfo;
/**
 * Get whether or not a chain is a testnet.
 * @param chainNameOrId The requested chain name or ID.
 * @returns An boolean to indicate the testnet classification of the given chain.
 */
function isTestnet(chainNameOrId) {
    const includesTestnet = getChainInfo(chainNameOrId).baseUrl.includes("testnet");
    return (includesTestnet ||
        chainNameOrId === "localhost" ||
        chainNameOrId === "local-tableland" ||
        chainNameOrId === 31337);
}
exports.isTestnet = isTestnet;
/**
 * Get the default contract address for a given chain name.
 * @param chainNameOrId The requested chain name or ID.
 * @returns A hex string representing the default address for the Tableland registry contract.
 */
function getContractAddress(chainNameOrId) {
    return getChainInfo(chainNameOrId).contractAddress;
}
exports.getContractAddress = getContractAddress;
/**
 * Get the default chain ID for a given chain name.
 * @param chainNameOrId The requested chain name or ID.
 * @returns A number representing the default chain ID of the requested chain.
 */
function getChainId(chainNameOrId) {
    return getChainInfo(chainNameOrId).chainId;
}
exports.getChainId = getChainId;
/**
 * Get the default host uri for a given chain name.
 * @param chainNameOrId The requested chain name.
 * @returns A string representing the default host uri for a given chain.
 */
function getBaseUrl(chainNameOrId) {
    return getChainInfo(chainNameOrId).baseUrl;
}
exports.getBaseUrl = getBaseUrl;
/**
 * Create a polling controller with chain-specific timeout & interval.
 * @param chainNameOrId The requested chain name.
 * @returns A {@link PollingController} with standard timeout & interval per-chain.
 */
function getChainPollingController(chainNameOrId) {
    const { pollingTimeout, pollingInterval } = getChainInfo(chainNameOrId);
    return (0, await_js_1.createPollingController)(pollingTimeout, pollingInterval);
}
exports.getChainPollingController = getChainPollingController;
/**
 * Override the internal list of registry addresses and validator urls that will be used for Contract calls and read queries
 * @param chainNameOrId Either the chain name or chainId.  For a list of chain names see the evm-tableland networks file
 * @param values The values you would like to use to override the defaults.
 *  Example: {contractAddress: "0x000deadbeef", baseUrl: "https://my.validator.mydomain.tld"}
 * @returns void
 */
// TODO: It seems important to add this to the docs somewhere since it's the key
//    to using the SDK for the non-default Validator
function overrideDefaults(chainNameOrId, values) {
    if (values == null || typeof values !== "object") {
        throw new Error("override values must be an Object");
    }
    for (const [key, value] of Object.entries(values)) {
        if (typeof chainNameOrId === "number") {
            const found = getChainInfo(chainNameOrId);
            found[key] = value;
            exports.supportedChains[found.chainName][key] = value;
        }
        else {
            const found = getChainInfo(chainNameOrId);
            found[key] = value;
            supportedChainsById[found.chainId][key] = value;
        }
    }
}
exports.overrideDefaults = overrideDefaults;
//# sourceMappingURL=chains.js.map