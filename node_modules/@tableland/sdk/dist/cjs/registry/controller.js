"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getController = exports.lockController = exports.setController = void 0;
const ethers_js_1 = require("../helpers/ethers.js");
const contract_js_1 = require("./contract.js");
async function setController({ signer }, params) {
    const { contract, overrides, tableId } = await (0, contract_js_1.getContractSetup)(signer, params.tableName);
    const caller = await signer.getAddress();
    const controller = params.controller;
    const chainId = await signer.getChainId();
    if ((0, ethers_js_1.isPolygon)(chainId)) {
        const gasLimit = await contract.estimateGas.setController(caller, tableId, controller, overrides);
        overrides.gasLimit = Math.floor(gasLimit.toNumber() * 1.2);
    }
    return await contract.setController(caller, tableId, controller, overrides);
}
exports.setController = setController;
async function lockController({ signer }, tableName) {
    const { contract, overrides, tableId } = await (0, contract_js_1.getContractSetup)(signer, tableName);
    const caller = await signer.getAddress();
    const chainId = await signer.getChainId();
    if ((0, ethers_js_1.isPolygon)(chainId)) {
        const gasLimit = await contract.estimateGas.lockController(caller, tableId, overrides);
        overrides.gasLimit = Math.floor(gasLimit.toNumber() * 1.2);
    }
    return await contract.lockController(caller, tableId, overrides);
}
exports.lockController = lockController;
async function getController({ signer }, tableName) {
    const { contract, overrides, tableId } = await (0, contract_js_1.getContractSetup)(signer, tableName);
    return await contract.getController(tableId, overrides);
}
exports.getController = getController;
//# sourceMappingURL=controller.js.map